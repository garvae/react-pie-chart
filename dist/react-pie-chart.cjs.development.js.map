{"version":3,"file":"react-pie-chart.cjs.development.js","sources":["../src/utils/debounce.ts","../src/PieChart.tsx"],"sourcesContent":["export const debounce = <T extends unknown[], U>(cb: (...args: T) => PromiseLike<U> | U, wait: number) => {\r\n  let timer: NodeJS.Timeout;\r\n\r\n  return (...args: T): Promise<U> => {\r\n    clearTimeout(timer);\r\n    return new Promise(resolve => {\r\n      timer = setTimeout(() => resolve(cb(...args)), wait);\r\n    });\r\n  };\r\n};\r\n","import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n} from 'react';\r\n\r\nimport { debounce } from './utils/debounce';\r\n\r\nexport type TDataItem = {\r\n  color: string;\r\n  order: number;\r\n  segmentId: string;\r\n  value: number;\r\n};\r\n\r\nexport type TPieChartCommonProps = {\r\n  className?: string;\r\n  data: TDataItem[];\r\n  debounceTime?: number;\r\n  donutHoleClassName?: string;\r\n  donutHoleColor?: string;\r\n  donutSegmentClassName?: string;\r\n  fontSize?: string;\r\n  maxSize?: number;\r\n  minSize?: number;\r\n  text?: string;\r\n  textClassName?: string;\r\n  textColor?: string;\r\n  textGroupClassName?: string;\r\n  textSvgObjectClassName?: string;\r\n};\r\n\r\nexport type TPieChartWithRefProps = TPieChartCommonProps & {\r\n  parentRef?: never;\r\n  size: number;\r\n};\r\n\r\nexport type TPieChartWithNoRefProps = TPieChartCommonProps & {\r\n  parentRef: React.RefObject<HTMLDivElement>;\r\n  size?: never;\r\n};\r\n\r\nexport type TPieChartProps = TPieChartWithRefProps | TPieChartWithNoRefProps;\r\n\r\nconst isClient = typeof window === 'object';\r\n\r\n/**\r\n * @component\r\n *\r\n *\r\n * @typedef TDataItem - Type of chart data item (segment)\r\n * @type {Object}\r\n * @prop {string} color - REQUIRED. Color of chart segment. Must be a CSS 'color' type\r\n * @prop {number} order - REQUIRED. Order of segment in pie chart map\r\n * @prop {string} segmentId - REQUIRED. Unique id of chart segment\r\n * @prop {number} value - REQUIRED. Value of segment\r\n *\r\n * @typedef TPieChartProps - Type of chart data item (segment)\r\n * @type {Object}\r\n * @prop {string} [className] - SVG className\r\n * @prop {Array.<TDataItem>} data - REQUIRED. Pie chart data\r\n * @prop {string} [donutHoleClassName] - Center circle className\r\n * @prop {string} [donutHoleColor='#ffffff'] - Center circle color\r\n * @prop {string} [donutSegmentClassName] - Circle segment className\r\n * @prop {string} [fontSize] - Center circle text size. Must be a CSS 'fontSize' type: '<number>px'\r\n * @prop {number} [maxSize] - Chart maximum size\r\n * @prop {number} [minSize] - Chart minimum size\r\n * @prop {React.RefObject<HTMLDivElement>} [parentRef] - REQUIRED if 'size' prop isn't given. Ref to container element\r\n * @prop {string} [text]\r\n * @prop {string} [textClassName] - ClassName of the <div> element that wraps center circle text\r\n * @prop {string} [textColor] - Center circle text color\r\n * @prop {string} [textGroupClassName] - <g> (group) element that wraps center circle text\r\n * @prop {string} [textSvgObjectClassName] - <foreignObject> element that wraps center circle text\r\n *\r\n *  // Debounce disabled when 'debounceTime' = 0\r\n *  // or when 'size' property value is given\r\n * @prop {number} [debounceTime=50] - Prevent unnecessary re-renders. Default 50ms.\r\n *\r\n *\r\n *  // Center circle text. Must be short enough to fit in the center of the chart.\r\n *  // Center circle will not be shown when this property is not given.\r\n * @prop {number} [size] - REQUIRED if 'parentRef' prop isn't given. Chart size. Chart element will not be resizable when this property is given.\r\n *\r\n *\r\n * @param {TPieChartProps} props\r\n * @returns {JSX.Element} Returns <svg> chart.\r\n *\r\n * @example\r\n * ```\r\n * const App = () => {\r\n *   const ref = React.useRef<HTMLDivElement>(null)\r\n *\r\n *   return (\r\n *     <div ref={ref}>\r\n *         <ChartPie data={DATA} parentRef={ref}/>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */\r\nconst PieChart = (props: TPieChartProps): JSX.Element => {\r\n\r\n  const {\r\n    className,\r\n    data,\r\n    debounceTime = 50,\r\n    donutHoleClassName,\r\n    donutHoleColor = '#ffffff',\r\n    donutSegmentClassName,\r\n    fontSize,\r\n    maxSize,\r\n    minSize,\r\n    parentRef,\r\n    size: sizeProp,\r\n    text,\r\n    textClassName,\r\n    textColor,\r\n    textGroupClassName,\r\n    textSvgObjectClassName,\r\n  } = props;\r\n\r\n  const [ size, setSize ] = useState(sizeProp || 0);\r\n\r\n  const totalDataValue = useMemo(() => data?.reduce((current, next) => current + next.value, 0), [ data ]) || 0;\r\n\r\n  /* main size of chart */\r\n  const viewBox = `0 0 ${size} ${size}`;\r\n  const halfSize = size / 2;\r\n  /* chart radius */\r\n  const radiusCalc = (size - halfSize) / 2;\r\n  const radius = radiusCalc >= 0 ? radiusCalc : 0;\r\n  /* chart center circle radius */\r\n  const holeRadius = size * 0.275;\r\n  /* 'strokeDasharray' of segments */\r\n  const strokeDasharray = radius * Math.PI * 2;\r\n\r\n  /* prevent unnecessary re-renders */\r\n  const updateSizeDebounced = debounce((newSize: number) => {\r\n    if (newSize !== size){\r\n      setSize(newSize);\r\n    }\r\n  }, debounceTime);\r\n\r\n  const updateSize = (newSize: number) => {\r\n    if (debounceTime === 0){\r\n      setSize(newSize);\r\n    } else {\r\n      updateSizeDebounced(newSize);\r\n    }\r\n  };\r\n\r\n  const handleResize = useCallback(() => {\r\n    const {\r\n      offsetHeight: h,\r\n      offsetWidth: w,\r\n    } = parentRef?.current || {};\r\n\r\n    if (typeof h === 'number' && typeof w === 'number') {\r\n\r\n      if (h === w){\r\n        updateSize(w);\r\n        return;\r\n      }\r\n\r\n      let s = 0;\r\n\r\n      if (h > 0 && w > 0) {\r\n        s = h > w ? w : h;\r\n      } else if (h) {\r\n        s = h;\r\n      } else if (w) {\r\n        s = w;\r\n      }\r\n\r\n      if (s){\r\n        if (minSize && (minSize >= s)) {\r\n          updateSize(minSize);\r\n        } else if (maxSize && (maxSize <= s)) {\r\n          updateSize(maxSize);\r\n        } else {\r\n          updateSize(s);\r\n        }\r\n      } else if (minSize){\r\n        updateSize(minSize);\r\n      }\r\n\r\n    }\r\n  }, [ parentRef ]);\r\n\r\n  useEffect(() => {\r\n    if (isClient && !sizeProp) {\r\n      handleResize() /* sets initial size */;\r\n\r\n      window.addEventListener('resize', handleResize) /* re-renders svg if parent container resized */;\r\n      return () => window.removeEventListener('resize', handleResize);\r\n    }\r\n  }, [ isClient ]);\r\n\r\n  return (\r\n    <svg\r\n      aria-labelledby=\"beers-title beers-desc\"\r\n      className={className}\r\n      role=\"img\"\r\n      style={\r\n        {\r\n          display: 'flex',\r\n          height: `${size || minSize || 0}px`,\r\n          width: `${size || minSize || 0}px`,\r\n        }\r\n      }\r\n      viewBox={viewBox}\r\n    >\r\n      {\r\n        data?.map((item, i) => {\r\n          const {\r\n            color,\r\n            segmentId,\r\n            value,\r\n          } = item;\r\n\r\n          /* sum of previous segments values */\r\n          const prevTotal = data?.filter((_, index) => index < i)?.reduce((c, n) => c + n.value, 0) || 0;\r\n          /* proportion of previous segments */\r\n          const prevPercentage = prevTotal / totalDataValue;\r\n          /* start angle of current segment */\r\n          const angle = 360 * prevPercentage;\r\n          /* proportion of current segment */\r\n          const percentage = value / totalDataValue;\r\n          /* 'strokeDashoffset' of current segment */\r\n          const strokeDashoffset = strokeDasharray - strokeDasharray * percentage;\r\n          /* 'rotation' of current segment */\r\n          const transform = `rotate(${-90 + angle} ${halfSize} ${halfSize})`;\r\n\r\n          return (\r\n            <circle\r\n              className={donutSegmentClassName}\r\n              cx={halfSize}\r\n              cy={halfSize}\r\n              fill=\"transparent\"\r\n              key={segmentId}\r\n              r={radius}\r\n              stroke={color}\r\n              strokeDasharray={strokeDasharray}\r\n              strokeDashoffset={strokeDashoffset}\r\n              strokeWidth={halfSize}\r\n              style={{ position: 'relative' }}\r\n              transform={transform}\r\n            />\r\n          );\r\n        })\r\n      }\r\n\r\n      {\r\n        text && (\r\n          <circle\r\n            className={donutHoleClassName}\r\n            cx={halfSize}\r\n            cy={halfSize}\r\n            fill={donutHoleColor}\r\n            r={holeRadius}\r\n          />\r\n        )\r\n      }\r\n\r\n      {\r\n        text && (\r\n          <g className={textGroupClassName}>\r\n            <foreignObject\r\n              className={textSvgObjectClassName}\r\n              height={size}\r\n              width={size}\r\n              x=\"0\"\r\n              y=\"0\"\r\n            >\r\n              <div\r\n                className={textClassName}\r\n                style={\r\n                  {\r\n                    alignItems: 'center',\r\n                    color: textColor || '#000000',\r\n                    display: 'flex',\r\n                    fontSize: fontSize || `${size / 6}px`,\r\n                    height: '100%',\r\n                    justifyContent: 'center',\r\n                    width: '100%',\r\n                  }\r\n                }\r\n              >\r\n                {text}\r\n              </div>\r\n            </foreignObject>\r\n          </g>\r\n        )\r\n      }\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default PieChart;\r\n"],"names":["debounce","cb","wait","timer","args","clearTimeout","Promise","resolve","setTimeout","isClient","window","PieChart","props","className","data","debounceTime","donutHoleClassName","donutHoleColor","donutSegmentClassName","fontSize","maxSize","minSize","parentRef","sizeProp","size","text","textClassName","textColor","textGroupClassName","textSvgObjectClassName","useState","setSize","totalDataValue","useMemo","reduce","current","next","value","viewBox","halfSize","radiusCalc","radius","holeRadius","strokeDasharray","Math","PI","updateSizeDebounced","newSize","updateSize","handleResize","useCallback","h","offsetHeight","w","offsetWidth","s","useEffect","addEventListener","removeEventListener","React","role","style","display","height","width","map","item","i","color","segmentId","prevTotal","filter","_","index","c","n","prevPercentage","angle","percentage","strokeDashoffset","transform","cx","cy","fill","key","r","stroke","strokeWidth","position","x","y","alignItems","justifyContent"],"mappings":"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"}