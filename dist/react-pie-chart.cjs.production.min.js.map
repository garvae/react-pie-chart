{"version":3,"file":"react-pie-chart.cjs.production.min.js","sources":["../src/PieChart.tsx"],"sourcesContent":["import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n} from 'react';\r\nimport useDebouncedCallback from 'use-debounce/esm/useDebouncedCallback';\r\n\r\nexport type TDataItem = {\r\n  color: string;\r\n  order: number;\r\n  segmentId: string;\r\n  value: number;\r\n};\r\n\r\nexport type TPieChartCommonProps = {\r\n  className?: string;\r\n  data: TDataItem[];\r\n  debounceTime?: number;\r\n  donutHoleClassName?: string;\r\n  donutHoleColor?: string;\r\n  donutSegmentClassName?: string;\r\n  fontSize?: string;\r\n  minSize?: number;\r\n  text?: string;\r\n  textClassName?: string;\r\n  textColor?: string;\r\n  textGroupClassName?: string;\r\n  textSvgObjectClassName?: string;\r\n};\r\n\r\nexport type TPieChartWithRefProps = TPieChartCommonProps & {\r\n  parentRef?: never;\r\n  size: number;\r\n};\r\n\r\nexport type TPieChartWithNoRefProps = TPieChartCommonProps & {\r\n  parentRef: React.RefObject<HTMLDivElement>;\r\n  size?: never;\r\n};\r\n\r\nexport type TPieChartProps = TPieChartWithRefProps | TPieChartWithNoRefProps;\r\n\r\nconst isClient = typeof window === 'object';\r\n\r\n/**\r\n * @component\r\n *\r\n *\r\n * @typedef TDataItem - Type of chart data item (segment)\r\n * @type {Object}\r\n * @prop {string} color - REQUIRED. Color of chart segment. Must be a CSS 'color' type\r\n * @prop {number} order - REQUIRED. Order of segment in pie chart map\r\n * @prop {string} segmentId - REQUIRED. Unique id of chart segment\r\n * @prop {number} value - REQUIRED. Value of segment\r\n *\r\n * @typedef TPieChartProps - Type of chart data item (segment)\r\n * @type {Object}\r\n * @prop {string} [className] - SVG className\r\n * @prop {Array.<TDataItem>} data - REQUIRED. Pie chart data\r\n * @prop {string} [donutHoleClassName] - Center circle className\r\n * @prop {string} [donutHoleColor='#ffffff'] - Center circle color\r\n * @prop {string} [donutSegmentClassName] - Circle segment className\r\n * @prop {string} [fontSize] - Center circle text size. Must be a CSS 'fontSize' type: '<number>px'\r\n * @prop {number} [minSize] - Chart minimum size\r\n * @prop {React.RefObject<HTMLDivElement>} [parentRef] - REQUIRED if 'size' prop isn't given. Ref to container element\r\n * @prop {string} [text]\r\n * @prop {string} [textClassName] - ClassName of the <div> element that wraps center circle text\r\n * @prop {string} [textColor] - Center circle text color\r\n * @prop {string} [textGroupClassName] - <g> (group) element that wraps center circle text\r\n * @prop {string} [textSvgObjectClassName] - <foreignObject> element that wraps center circle text\r\n *\r\n *  // Debounce disabled when 'debounceTime' = 0\r\n *  // or when 'size' property value is given\r\n * @prop {number} [debounceTime=50] - Prevent unnecessary re-renders. Default 50ms.\r\n *\r\n *\r\n *  // Center circle text. Must be short enough to fit in the center of the chart.\r\n *  // Center circle will not be shown when this property is not given.\r\n * @prop {number} [size] - REQUIRED if 'parentRef' prop isn't given. Chart size. Chart element will not be resizable when this property is given.\r\n *\r\n *\r\n * @param {TPieChartProps} props\r\n * @returns {JSX.Element} Returns <svg> chart.\r\n *\r\n * @example\r\n * ```\r\n * const App = () => {\r\n *   const ref = React.useRef<HTMLDivElement>(null)\r\n *\r\n *   return (\r\n *     <div ref={ref}>\r\n *         <ChartPie data={DATA} parentRef={ref}/>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */\r\nexport const PieChart = (props: TPieChartProps): JSX.Element => {\r\n\r\n  const {\r\n    className,\r\n    data,\r\n    debounceTime = 50,\r\n    donutHoleClassName,\r\n    donutHoleColor = '#ffffff',\r\n    donutSegmentClassName,\r\n    fontSize,\r\n    minSize,\r\n    parentRef,\r\n    size: sizeProp,\r\n    text,\r\n    textClassName,\r\n    textColor,\r\n    textGroupClassName,\r\n    textSvgObjectClassName,\r\n  } = props;\r\n\r\n  const [ size, setSize ] = useState(sizeProp || 0);\r\n\r\n  const totalDataValue = useMemo(() => data?.reduce((current, next) => current + next.value, 0), [ data ]) || 0;\r\n\r\n  /* main size of chart */\r\n  const viewBox = `0 0 ${size} ${size}`;\r\n  const halfSize = size / 2;\r\n  /* chart radius */\r\n  const radiusCalc = (size - halfSize) / 2;\r\n  const radius = radiusCalc >= 0 ? radiusCalc : 0;\r\n  /* chart center circle radius */\r\n  const holeRadius = size * 0.275;\r\n  /* 'strokeDasharray' of segments */\r\n  const strokeDasharray = radius * Math.PI * 2;\r\n\r\n  /* prevent unnecessary re-renders */\r\n  const updateSizeDebounced = useDebouncedCallback((newSize: number) => {\r\n    if (newSize !== size){\r\n      setSize(newSize);\r\n    }\r\n  }, debounceTime);\r\n\r\n  const updateSize = (newSize: number) => {\r\n    if (debounceTime === 0){\r\n      setSize(newSize);\r\n    } else {\r\n      updateSizeDebounced(newSize);\r\n    }\r\n  };\r\n\r\n  const handleResize = useCallback(() => {\r\n    const {\r\n      offsetHeight: h,\r\n      offsetWidth: w,\r\n    } = parentRef?.current || {};\r\n\r\n    if (typeof h === 'number' && typeof w === 'number') {\r\n\r\n      if (h === w){\r\n        updateSize(w);\r\n        return;\r\n      }\r\n\r\n      let s = 0;\r\n\r\n      if (h > 0 && w > 0) {\r\n        s = h > w ? w : h;\r\n      } else if (h) {\r\n        s = h;\r\n      } else if (w) {\r\n        s = w;\r\n      }\r\n\r\n      if (s){\r\n        if (minSize && (minSize >= s)) {\r\n          updateSize(minSize);\r\n        } else {\r\n          updateSize(s);\r\n        }\r\n      } else if (minSize){\r\n        updateSize(minSize);\r\n      }\r\n\r\n    }\r\n  }, [ parentRef ]);\r\n\r\n  useEffect(() => {\r\n    if (isClient && !sizeProp) {\r\n      handleResize() /* sets initial size */;\r\n\r\n      window.addEventListener('resize', handleResize) /* re-renders svg if parent container resized */;\r\n      return () => window.removeEventListener('resize', handleResize);\r\n    }\r\n  }, [ isClient ]);\r\n\r\n  return (\r\n    <svg\r\n      aria-labelledby=\"beers-title beers-desc\"\r\n      className={className}\r\n      role=\"img\"\r\n      style={\r\n        {\r\n          display: 'flex',\r\n          height: `${size || minSize || 0}px`,\r\n          width: `${size || minSize || 0}px`,\r\n        }\r\n      }\r\n      viewBox={viewBox}\r\n    >\r\n      {\r\n        data?.map((item, i) => {\r\n          const {\r\n            color,\r\n            segmentId,\r\n            value,\r\n          } = item;\r\n\r\n          /* sum of previous segments values */\r\n          const prevTotal = data?.filter((_, index) => index < i)?.reduce((c, n) => c + n.value, 0) || 0;\r\n          /* proportion of previous segments */\r\n          const prevPercentage = prevTotal / totalDataValue;\r\n          /* start angle of current segment */\r\n          const angle = 360 * prevPercentage;\r\n          /* proportion of current segment */\r\n          const percentage = value / totalDataValue;\r\n          /* 'strokeDashoffset' of current segment */\r\n          const strokeDashoffset = strokeDasharray - strokeDasharray * percentage;\r\n          /* 'rotation' of current segment */\r\n          const transform = `rotate(${-90 + angle} ${halfSize} ${halfSize})`;\r\n\r\n          return (\r\n            <circle\r\n              className={donutSegmentClassName}\r\n              cx={halfSize}\r\n              cy={halfSize}\r\n              fill=\"transparent\"\r\n              key={segmentId}\r\n              r={radius}\r\n              stroke={color}\r\n              strokeDasharray={strokeDasharray}\r\n              strokeDashoffset={strokeDashoffset}\r\n              strokeWidth={halfSize}\r\n              style={{ position: 'relative' }}\r\n              transform={transform}\r\n            />\r\n          );\r\n        })\r\n      }\r\n\r\n      {\r\n        text && (\r\n          <circle\r\n            className={donutHoleClassName}\r\n            cx={halfSize}\r\n            cy={halfSize}\r\n            fill={donutHoleColor}\r\n            r={holeRadius}\r\n          />\r\n        )\r\n      }\r\n\r\n      {\r\n        text && (\r\n          <g className={textGroupClassName}>\r\n            <foreignObject\r\n              className={textSvgObjectClassName}\r\n              height={size}\r\n              width={size}\r\n              x=\"0\"\r\n              y=\"0\"\r\n            >\r\n              <div\r\n                className={textClassName}\r\n                style={\r\n                  {\r\n                    alignItems: 'center',\r\n                    color: textColor || '#000000',\r\n                    display: 'flex',\r\n                    fontSize: fontSize || `${size / 6}px`,\r\n                    height: '100%',\r\n                    justifyContent: 'center',\r\n                    width: '100%',\r\n                  }\r\n                }\r\n              >\r\n                {text}\r\n              </div>\r\n            </foreignObject>\r\n          </g>\r\n        )\r\n      }\r\n    </svg>\r\n  );\r\n};\r\n"],"names":["isClient","window","props","className","data","debounceTime","donutHoleClassName","donutHoleColor","donutSegmentClassName","fontSize","minSize","parentRef","sizeProp","size","text","textClassName","textColor","textGroupClassName","textSvgObjectClassName","useState","setSize","totalDataValue","useMemo","reduce","current","next","value","viewBox","halfSize","radiusCalc","radius","holeRadius","strokeDasharray","Math","PI","updateSizeDebounced","useDebouncedCallback","newSize","updateSize","handleResize","useCallback","h","offsetHeight","w","offsetWidth","s","useEffect","addEventListener","removeEventListener","React","role","style","display","height","width","map","item","i","color","segmentId","prevTotal","filter","_","index","c","n","cx","cy","fill","key","r","stroke","strokeDashoffset","strokeWidth","position","transform","x","y","alignItems","justifyContent"],"mappings":"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"}